// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: partialfoods.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace PartialFoods.Services {

  /// <summary>Holder for reflection information generated from partialfoods.proto</summary>
  public static partial class PartialfoodsReflection {

    #region Descriptor
    /// <summary>File descriptor for partialfoods.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PartialfoodsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJwYXJ0aWFsZm9vZHMucHJvdG8SFVBhcnRpYWxGb29kcy5TZXJ2aWNlcyK+",
            "AQoWUG9pbnRPZlNhbGVUcmFuc2FjdGlvbhIVCg1UcmFuc2FjdGlvbklEGAEg",
            "ASgJEhEKCVN0YXRpb25JRBgCIAEoCRIRCglDcmVhdGVkT24YAyABKAQSDgoG",
            "VXNlcklEGAQgASgJEhIKCkxvY2F0aW9uSUQYBSABKAkSDwoHVGF4UmF0ZRgG",
            "IAEoDRIyCglMaW5lSXRlbXMYByADKAsyHy5QYXJ0aWFsRm9vZHMuU2Vydmlj",
            "ZXMuTGluZUl0ZW0iPAoITGluZUl0ZW0SCwoDU0tVGAEgASgJEhEKCVVuaXRQ",
            "cmljZRgCIAEoDRIQCghRdWFudGl0eRgDIAEoDSJACh1UcmFuc2FjdGlvblN1",
            "Ym1pc3Npb25SZXNwb25zZRIQCghBY2NlcHRlZBgBIAEoCBINCgVBY2tJRBgC",
            "IAEoCTKOAQoSUG9pbnRPZlNhbGVDb21tYW5kEngKEVN1Ym1pdFRyYW5zYWN0",
            "aW9uEi0uUGFydGlhbEZvb2RzLlNlcnZpY2VzLlBvaW50T2ZTYWxlVHJhbnNh",
            "Y3Rpb24aNC5QYXJ0aWFsRm9vZHMuU2VydmljZXMuVHJhbnNhY3Rpb25TdWJt",
            "aXNzaW9uUmVzcG9uc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::PartialFoods.Services.PointOfSaleTransaction), global::PartialFoods.Services.PointOfSaleTransaction.Parser, new[]{ "TransactionID", "StationID", "CreatedOn", "UserID", "LocationID", "TaxRate", "LineItems" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PartialFoods.Services.LineItem), global::PartialFoods.Services.LineItem.Parser, new[]{ "SKU", "UnitPrice", "Quantity" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::PartialFoods.Services.TransactionSubmissionResponse), global::PartialFoods.Services.TransactionSubmissionResponse.Parser, new[]{ "Accepted", "AckID" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PointOfSaleTransaction : pb::IMessage<PointOfSaleTransaction> {
    private static readonly pb::MessageParser<PointOfSaleTransaction> _parser = new pb::MessageParser<PointOfSaleTransaction>(() => new PointOfSaleTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointOfSaleTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PartialFoods.Services.PartialfoodsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointOfSaleTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointOfSaleTransaction(PointOfSaleTransaction other) : this() {
      transactionID_ = other.transactionID_;
      stationID_ = other.stationID_;
      createdOn_ = other.createdOn_;
      userID_ = other.userID_;
      locationID_ = other.locationID_;
      taxRate_ = other.taxRate_;
      lineItems_ = other.lineItems_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointOfSaleTransaction Clone() {
      return new PointOfSaleTransaction(this);
    }

    /// <summary>Field number for the "TransactionID" field.</summary>
    public const int TransactionIDFieldNumber = 1;
    private string transactionID_ = "";
    /// <summary>
    /// UUID of the Transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactionID {
      get { return transactionID_; }
      set {
        transactionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StationID" field.</summary>
    public const int StationIDFieldNumber = 2;
    private string stationID_ = "";
    /// <summary>
    /// UUID of the station/terminal that took the TX
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StationID {
      get { return stationID_; }
      set {
        stationID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CreatedOn" field.</summary>
    public const int CreatedOnFieldNumber = 3;
    private ulong createdOn_;
    /// <summary>
    /// UTC milliseconds of time terminal created transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreatedOn {
      get { return createdOn_; }
      set {
        createdOn_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 4;
    private string userID_ = "";
    /// <summary>
    /// Terminal User ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LocationID" field.</summary>
    public const int LocationIDFieldNumber = 5;
    private string locationID_ = "";
    /// <summary>
    /// Unique store/location UUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LocationID {
      get { return locationID_; }
      set {
        locationID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TaxRate" field.</summary>
    public const int TaxRateFieldNumber = 6;
    private uint taxRate_;
    /// <summary>
    /// Percentage rate of tax, whole numbers because reasons
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TaxRate {
      get { return taxRate_; }
      set {
        taxRate_ = value;
      }
    }

    /// <summary>Field number for the "LineItems" field.</summary>
    public const int LineItemsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::PartialFoods.Services.LineItem> _repeated_lineItems_codec
        = pb::FieldCodec.ForMessage(58, global::PartialFoods.Services.LineItem.Parser);
    private readonly pbc::RepeatedField<global::PartialFoods.Services.LineItem> lineItems_ = new pbc::RepeatedField<global::PartialFoods.Services.LineItem>();
    /// <summary>
    /// Individual line items on a transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::PartialFoods.Services.LineItem> LineItems {
      get { return lineItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointOfSaleTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointOfSaleTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionID != other.TransactionID) return false;
      if (StationID != other.StationID) return false;
      if (CreatedOn != other.CreatedOn) return false;
      if (UserID != other.UserID) return false;
      if (LocationID != other.LocationID) return false;
      if (TaxRate != other.TaxRate) return false;
      if(!lineItems_.Equals(other.lineItems_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionID.Length != 0) hash ^= TransactionID.GetHashCode();
      if (StationID.Length != 0) hash ^= StationID.GetHashCode();
      if (CreatedOn != 0UL) hash ^= CreatedOn.GetHashCode();
      if (UserID.Length != 0) hash ^= UserID.GetHashCode();
      if (LocationID.Length != 0) hash ^= LocationID.GetHashCode();
      if (TaxRate != 0) hash ^= TaxRate.GetHashCode();
      hash ^= lineItems_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TransactionID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TransactionID);
      }
      if (StationID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StationID);
      }
      if (CreatedOn != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(CreatedOn);
      }
      if (UserID.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserID);
      }
      if (LocationID.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LocationID);
      }
      if (TaxRate != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TaxRate);
      }
      lineItems_.WriteTo(output, _repeated_lineItems_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TransactionID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionID);
      }
      if (StationID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StationID);
      }
      if (CreatedOn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatedOn);
      }
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (LocationID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LocationID);
      }
      if (TaxRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TaxRate);
      }
      size += lineItems_.CalculateSize(_repeated_lineItems_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointOfSaleTransaction other) {
      if (other == null) {
        return;
      }
      if (other.TransactionID.Length != 0) {
        TransactionID = other.TransactionID;
      }
      if (other.StationID.Length != 0) {
        StationID = other.StationID;
      }
      if (other.CreatedOn != 0UL) {
        CreatedOn = other.CreatedOn;
      }
      if (other.UserID.Length != 0) {
        UserID = other.UserID;
      }
      if (other.LocationID.Length != 0) {
        LocationID = other.LocationID;
      }
      if (other.TaxRate != 0) {
        TaxRate = other.TaxRate;
      }
      lineItems_.Add(other.lineItems_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TransactionID = input.ReadString();
            break;
          }
          case 18: {
            StationID = input.ReadString();
            break;
          }
          case 24: {
            CreatedOn = input.ReadUInt64();
            break;
          }
          case 34: {
            UserID = input.ReadString();
            break;
          }
          case 42: {
            LocationID = input.ReadString();
            break;
          }
          case 48: {
            TaxRate = input.ReadUInt32();
            break;
          }
          case 58: {
            lineItems_.AddEntriesFrom(input, _repeated_lineItems_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class LineItem : pb::IMessage<LineItem> {
    private static readonly pb::MessageParser<LineItem> _parser = new pb::MessageParser<LineItem>(() => new LineItem());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LineItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PartialFoods.Services.PartialfoodsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineItem(LineItem other) : this() {
      sKU_ = other.sKU_;
      unitPrice_ = other.unitPrice_;
      quantity_ = other.quantity_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineItem Clone() {
      return new LineItem(this);
    }

    /// <summary>Field number for the "SKU" field.</summary>
    public const int SKUFieldNumber = 1;
    private string sKU_ = "";
    /// <summary>
    /// Stock Keeping Unit of inventory item being purchased
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SKU {
      get { return sKU_; }
      set {
        sKU_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UnitPrice" field.</summary>
    public const int UnitPriceFieldNumber = 2;
    private uint unitPrice_;
    /// <summary>
    /// Price for a single item
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint UnitPrice {
      get { return unitPrice_; }
      set {
        unitPrice_ = value;
      }
    }

    /// <summary>Field number for the "Quantity" field.</summary>
    public const int QuantityFieldNumber = 3;
    private uint quantity_;
    /// <summary>
    /// Quantity of items purchased
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quantity {
      get { return quantity_; }
      set {
        quantity_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LineItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LineItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SKU != other.SKU) return false;
      if (UnitPrice != other.UnitPrice) return false;
      if (Quantity != other.Quantity) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SKU.Length != 0) hash ^= SKU.GetHashCode();
      if (UnitPrice != 0) hash ^= UnitPrice.GetHashCode();
      if (Quantity != 0) hash ^= Quantity.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SKU.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SKU);
      }
      if (UnitPrice != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UnitPrice);
      }
      if (Quantity != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Quantity);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SKU.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SKU);
      }
      if (UnitPrice != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UnitPrice);
      }
      if (Quantity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quantity);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LineItem other) {
      if (other == null) {
        return;
      }
      if (other.SKU.Length != 0) {
        SKU = other.SKU;
      }
      if (other.UnitPrice != 0) {
        UnitPrice = other.UnitPrice;
      }
      if (other.Quantity != 0) {
        Quantity = other.Quantity;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SKU = input.ReadString();
            break;
          }
          case 16: {
            UnitPrice = input.ReadUInt32();
            break;
          }
          case 24: {
            Quantity = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionSubmissionResponse : pb::IMessage<TransactionSubmissionResponse> {
    private static readonly pb::MessageParser<TransactionSubmissionResponse> _parser = new pb::MessageParser<TransactionSubmissionResponse>(() => new TransactionSubmissionResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionSubmissionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::PartialFoods.Services.PartialfoodsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSubmissionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSubmissionResponse(TransactionSubmissionResponse other) : this() {
      accepted_ = other.accepted_;
      ackID_ = other.ackID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSubmissionResponse Clone() {
      return new TransactionSubmissionResponse(this);
    }

    /// <summary>Field number for the "Accepted" field.</summary>
    public const int AcceptedFieldNumber = 1;
    private bool accepted_;
    /// <summary>
    /// Indicates whether the transaction was accepted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accepted {
      get { return accepted_; }
      set {
        accepted_ = value;
      }
    }

    /// <summary>Field number for the "AckID" field.</summary>
    public const int AckIDFieldNumber = 2;
    private string ackID_ = "";
    /// <summary>
    /// UUID of transaction acknowledgement for later lookup
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AckID {
      get { return ackID_; }
      set {
        ackID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionSubmissionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionSubmissionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accepted != other.Accepted) return false;
      if (AckID != other.AckID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accepted != false) hash ^= Accepted.GetHashCode();
      if (AckID.Length != 0) hash ^= AckID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accepted != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accepted);
      }
      if (AckID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AckID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accepted != false) {
        size += 1 + 1;
      }
      if (AckID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AckID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionSubmissionResponse other) {
      if (other == null) {
        return;
      }
      if (other.Accepted != false) {
        Accepted = other.Accepted;
      }
      if (other.AckID.Length != 0) {
        AckID = other.AckID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Accepted = input.ReadBool();
            break;
          }
          case 18: {
            AckID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
